---
layout: default
modal-id: 3
date: 2017-11-01
img: doctordata.png
alt: image-alt
project-date: November 2017
client: Medialab Prado Madrid
client-url: "http://medialab-prado.es"
category: Data Analytics
url-dir: "https://github.com/medialab-prado/doctordata"
subtitle: "A collaborative tool to help improve the open data of our city."
---

# Collaborative open data using OpenStreetMap

One of the main problems faced by an open data portal is the coverage and quality of the data found in it. These are generated by the public administrations with great effort and searching among the information that have been stored over the years in different formats.

Given these facts, a question arises: can citizens help administrations in the task of data collection?

__Promoter__

Esteban González Guardia

__Collaborator__

Raimundo Abril López

__Our bot on Telegram__

`@ datamad_bot`

__What is DoctorData?__

DoctorData is a bot linked to its own website that allows citizens to interact with their public data and improve them. Based on the open data of the Madrid City Council website, it compares them with OpenStreetMap and looks for errors or discrepancies. With this information, it generates challenges that it proposes to the citizens to, among all, improve the quality of the data.

In addition, through the [DoctorData website](https://medialab-prado.github.io/doctordata), we propose a platform to visualize the conflicts found in the different datasets. So, in a quick way, we can see these errors, we can also see areas that require attention, or on the contrary, see where we have the most collaborative neighbors.

__Why DoctorData?__

Because we believe it is an agreement that benefits both parties, on the one hand, the City Council obtains high quality information in a very simple way and because it facilitates citizens to interact with their urban elements.

__What have we done?__

We have compared City datasets with those available in OpenStreetMap through its API.
There we have identified elements that are either not on the City Council website or have large deviations in their GPS position.


__How does DoctorData work?__

Just launch the script and contact the bot by Telegram:

`python3 bot/doctordata_bot.py`

This bot uses the data analyzed previously to propose challenges to citizens, through:

1. Challenge of the day, is a predefined challenge and seeks to respond quickly to any particular issue.
2. Location, look for challenges close to the user.
3. Randomly searches for random challenges around the city.

The structure of the folder is simple, on the one hand we have our bot script and an `install_missing.sh`. When the bot starts working, it will create json files with information about the session, with all the contacts, challenges you have launched and responses from the people who have participated with us. It will also generate csv temporary files with custom challenges per user according to the last location.

The datasets we use are mainly urban elements:

1. Drinking water Fountains
2. Banks
3. Litter bins
4. Streetlights, we have chosen this dataset because it is an example of dataset not available through the City Council website.

__API__

In this section you will find the data prepared in Json to be served. As used by our Bot.

The data is downloaded from the City Council website and recorded in date with its date as you can see inside the folders. Make sure that in `index.csv` all the names of the columns are contained correctly. This `index.csv` file is very important because it helps the script to recognize what is going to find in the csv data files according to the type of file. This allows a very fast integration of any new dataset that arrives!!

Then launch `doctordata.py` script. For example, to analyze Public water fountains in `20171110-InventoryFuentes.csv`.

`python3 api/data/doctordata.py 20171110-InventoryFuentes.csv`

This script will create us csv files with the differences between the source file the City Council and the OpenStreetMap database. This process is automated through the OpenStreetMap API. Next we execute:

`python3 api/translate_csv_to_json.py`

To obtain the `.json` files that the bot and the web need.
